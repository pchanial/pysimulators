module operators

    use, intrinsic :: iso_fortran_env
    use module_pointingmatrix
    implicit none

contains

    ! <itype=4,4,8,8>
    ! <mtype=4,8,4,8>

    subroutine fsr_kernel_i<itype>_m<mtype>(matrix, kernel, ncolmax, m, n)
        integer, parameter          :: s = <itype> + <mtype>
        integer*8, intent(in)       :: ncolmax
        integer*8, intent(in)       :: m
        integer*8, intent(in)       :: n
        !f2py integer*1, intent(in) :: matrix(ncolmax*m*s)
        type(PointingElement_i<itype>_m<mtype>), intent(in) ::                 &
            matrix(ncolmax, m)
        logical(1), intent(inout)   :: kernel(0:n-1)
        integer*<itype> :: col
        integer*8 :: i, j

        !$omp parallel do private(col)
        do i = 1, m
            do j = 1, ncolmax
                col = matrix(j,i)%index
                if (col < 0 .or. matrix(j,i)%value == 0) cycle
                kernel(col) = .false.
            end do
        end do
        !$omp end parallel do

    end subroutine


    subroutine fsr_rot2d_kernel_i<itype>_m<mtype>(matrix, kernel, ncolmax, m, n)
        integer, parameter          :: s = <itype> + 2 * <mtype>
        integer*8, intent(in)       :: ncolmax
        integer*8, intent(in)       :: m
        integer*8, intent(in)       :: n
        !f2py integer*1, intent(in) :: matrix(ncolmax*m*s)
        type(PointingElementRot2d_i<itype>_m<mtype>), intent(in) ::            &
            matrix(ncolmax, m)
        logical(1), intent(inout)   :: kernel(0:n-1)
        integer*<itype> :: col
        integer*8 :: i, j

        !$omp parallel do private(col)
        do i = 1, m
            do j = 1, ncolmax
                col = matrix(j,i)%index
                if (col < 0 .or.                                               &
                    matrix(j,i)%r11 == 0 .and. matrix(j,i)%r21 == 0) cycle
                kernel(col) = .false.
            end do
        end do
        !$omp end parallel do

    end subroutine


    subroutine fsr_rot3d_kernel_i<itype>_m<mtype>(matrix, kernel, ncolmax, m, n)
        integer, parameter          :: s = <itype> + 3 * <mtype>
        integer*8, intent(in)       :: ncolmax
        integer*8, intent(in)       :: m
        integer*8, intent(in)       :: n
        !f2py integer*1, intent(in) :: matrix(ncolmax*m*s)
        type(PointingElementRot3d_i<itype>_m<mtype>), intent(in) ::            &
            matrix(ncolmax, m)
        logical(1), intent(inout)   :: kernel(0:n-1)
        integer*<itype> :: col
        integer*8 :: i, j

        !$omp parallel do private(col)
        do i = 1, m
            do j = 1, ncolmax
                col = matrix(j,i)%index
                if (col < 0 .or. matrix(j,i)%r11 == 0) cycle
                kernel(col) = .false.
            end do
        end do
        !$omp end parallel do

    end subroutine


    ! <itype=4,4,4,8,8,8>
    ! <mtype=4,4,8,4,4,8>
    ! <vtype=4,8,8,4,8,8>

    subroutine fsr_pT1_i<itype>_m<mtype>_v<vtype>(matrix, pT1, ncolmax, ninput,&
                                noutput)
        integer, parameter          :: s = <itype> + <mtype>
        integer*8, intent(in)       :: ncolmax
        integer*8, intent(in)       :: ninput
        integer*8, intent(in)       :: noutput
        !f2py integer*1, intent(in) :: matrix(ncolmax*ninput*s)
        type(PointingElement_i<itype>_m<mtype>), intent(in) ::                 &
            matrix(ncolmax, ninput)
        real*<vtype>, intent(inout) :: pT1(0:noutput-1)
        integer*<itype> :: col
        integer*8 :: i, j

        !$omp parallel do private(col)
        do i = 1, ninput
            do j = 1, ncolmax
                col = matrix(j,i)%index
                if (col < 0) cycle
                !$omp atomic
                pT1(col) = pT1(col) + matrix(j,i)%value
            end do
        end do
        !$omp end parallel do

    end subroutine


    subroutine fsr_rot2d_pT1_i<itype>_m<mtype>_v<vtype>(matrix, pT1, ncolmax,  &
                                      ninput, noutput)
        integer, parameter          :: s = <itype> + 2 * <mtype>
        integer*8, intent(in)       :: ncolmax
        integer*8, intent(in)       :: ninput
        integer*8, intent(in)       :: noutput
        !f2py integer*1, intent(in) :: matrix(ncolmax*ninput*s)
        type(PointingElementRot2d_i<itype>_m<mtype>), intent(in) ::            &
            matrix(ncolmax, ninput)
        real*<vtype>, intent(inout) :: pT1(0:noutput-1)
        integer*<itype> :: col
        integer*8 :: i, j

        !$omp parallel do private(col)
        do i = 1, ninput
            do j = 1, ncolmax
                col = matrix(j,i)%index
                if (col < 0) cycle
                !$omp atomic
                pT1(col) = pT1(col) + sqrt(matrix(j,i)%r11**2 +                &
                     matrix(j,i)%r21**2)
            end do
        end do
        !$omp end parallel do

    end subroutine


    subroutine fsr_rot3d_pT1_i<itype>_m<mtype>_v<vtype>(matrix, pT1, ncolmax,  &
                                      ninput, noutput)
        integer, parameter          :: s = <itype> + 3 * <mtype>
        integer*8, intent(in)       :: ncolmax
        integer*8, intent(in)       :: ninput
        integer*8, intent(in)       :: noutput
        !f2py integer*1, intent(in) :: matrix(ncolmax*ninput*s)
        type(PointingElementRot3d_i<itype>_m<mtype>), intent(in) ::            &
            matrix(ncolmax, ninput)
        real*<vtype>, intent(inout) :: pT1(0:noutput-1)
        integer*<itype> :: col
        integer*8 :: i, j

        !$omp parallel do private(col)
        do i = 1, ninput
            do j = 1, ncolmax
                col = matrix(j,i)%index
                if (col < 0) cycle
                !$omp atomic
                pT1(col) = pT1(col) + matrix(j,i)%r11
            end do
        end do
        !$omp end parallel do

    end subroutine


    subroutine fsr_pTx_pT1_i<itype>_m<mtype>_v<vtype>(matrix, input, pTx, pT1, &
                                    ncolmax, ninput, noutput)
        integer, parameter          :: s = <itype> + <mtype>
        integer*8, intent(in)       :: ncolmax
        integer*8, intent(in)       :: ninput
        integer*8, intent(in)       :: noutput
        !f2py integer*1, intent(in) :: matrix(ncolmax*ninput*s)
        type(PointingElement_i<itype>_m<mtype>), intent(in) ::                 &
            matrix(ncolmax, ninput)
        real*<vtype>, intent(in)    :: input(ninput)
        real*<vtype>, intent(inout) :: pTx(0:noutput-1)
        real*<vtype>, intent(inout) :: pT1(0:noutput-1)
        real*<mtype> :: val
        integer*<itype> :: col
        integer*8 :: i, j

        !$omp parallel do private(col, val)
        do i = 1, ninput
            do j = 1, ncolmax
                col = matrix(j,i)%index
                if (col < 0) cycle
                val = matrix(j,i)%value
                !$omp atomic
                pTx(col) = pTx(col) + val * input(i)
                !$omp atomic
                pT1(col) = pT1(col) + val
            end do
        end do
        !$omp end parallel do

    end subroutine


    subroutine fsr_rot3d_pTx_pT1_i<itype>_m<mtype>_v<vtype>(matrix, input, pTx,&
                                          pT1, ncolmax, ninput, noutput)
        integer, parameter          :: s = <itype> + 3 * <mtype>
        integer*8, intent(in)       :: ncolmax
        integer*8, intent(in)       :: ninput
        integer*8, intent(in)       :: noutput
        !f2py integer*1, intent(in) :: matrix(ncolmax*ninput*s)
        type(PointingElementRot3d_i<itype>_m<mtype>), intent(in) ::            &
            matrix(ncolmax, ninput)
        real*<vtype>, intent(in)    :: input(3,ninput)
        real*<vtype>, intent(inout) :: pTx(0:noutput-1)
        real*<vtype>, intent(inout) :: pT1(0:noutput-1)
        real*<mtype> :: val
        integer*<itype> :: col
        integer*8 :: i, j

        !$omp parallel do private(col, val)
        do i = 1, ninput
            do j = 1, ncolmax
                col = matrix(j,i)%index
                if (col < 0) cycle
                val = matrix(j,i)%r11
                !$omp atomic
                pTx(col) = pTx(col) + val * input(1,i)
                !$omp atomic
                pT1(col) = pT1(col) + val
            end do
        end do
        !$omp end parallel do

    end subroutine


    ! <isize=4,4,8,8>
    ! <ikind=int32,int32,int64,int64>
    ! <msize=4,8,4,8>
    ! <mkind=real32,real64,real32,real64>

    subroutine fsr_restrict_i<isize>_m<msize>(matrix, mask, ncolmax, m, n, ncol)
        integer, parameter          :: s = <isize> + <msize>
        integer(int64), intent(in)  :: ncolmax
        integer(int64), intent(in)  :: m
        integer(int64), intent(in)  :: n
        !f2py integer*1, intent(inout) :: matrix(ncolmax*m*s)
        type(PointingElement_i<isize>_m<msize>), intent(inout) ::              &
            matrix(ncolmax, m)
        logical*1, intent(in)         :: mask(0:n-1)
        integer(<ikind>), intent(out) :: ncol
        integer(<ikind>)              :: new_index(0:n-1), col
        integer(int64)                :: i, j

        ncol = 0
        do i = 0, n-1
            if (mask(i)) then
                new_index(i) = ncol
                ncol = ncol + 1
            else
                new_index(i) = -1
            end if
        end do

        !$omp parallel do private(col)
        do i = 1, m
            do j = 1, ncolmax
                col = matrix(j,i)%index
                if (col < 0) cycle
                matrix(j,i)%index = new_index(col)
            end do
        end do
        !$omp end parallel do

    end subroutine

    subroutine fsr_rot2d_restrict_i<isize>_m<msize>(matrix, mask, ncolmax, m,  &
                                                    n, ncol)
        integer, parameter          :: s = <isize> + 2 * <msize>
        integer(int64), intent(in)  :: ncolmax
        integer(int64), intent(in)  :: m
        integer(int64), intent(in)  :: n
        !f2py integer*1, intent(inout) :: matrix(ncolmax*m*s)
        type(PointingElementRot2d_i<isize>_m<msize>), intent(inout) ::         &
            matrix(ncolmax, m)
        logical*1, intent(in)         :: mask(0:n-1)
        integer(<ikind>), intent(out) :: ncol
        integer(<ikind>)              :: new_index(0:n-1), col
        integer(int64)                :: i, j

        ncol = 0
        do i = 0, n-1
            if (mask(i)) then
                new_index(i) = ncol
                ncol = ncol + 1
            else
                new_index(i) = -1
            end if
        end do

        !$omp parallel do private(col)
        do i = 1, m
            do j = 1, ncolmax
                col = matrix(j,i)%index
                if (col < 0) cycle
                matrix(j,i)%index = new_index(col)
            end do
        end do
        !$omp end parallel do

    end subroutine

    subroutine fsr_rot3d_restrict_i<isize>_m<msize>(matrix, mask, ncolmax, m,  &
                                                    n, ncol)
        integer, parameter          :: s = <isize> + 3 * <msize>
        integer(int64), intent(in)  :: ncolmax
        integer(int64), intent(in)  :: m
        integer(int64), intent(in)  :: n
        !f2py integer*1, intent(inout) :: matrix(ncolmax*m*s)
        type(PointingElementRot3d_i<isize>_m<msize>), intent(inout) ::         &
            matrix(ncolmax, m)
        logical*1, intent(in)         :: mask(0:n-1)
        integer(<ikind>)              :: new_index(0:n-1), col
        integer(<ikind>), intent(out) :: ncol
        integer(int64)                :: i, j

        ncol = 0
        do i = 0, n-1
            if (mask(i)) then
                new_index(i) = ncol
                ncol = ncol + 1
            else
                new_index(i) = -1
            end if
        end do

        !$omp parallel do private(col)
        do i = 1, m
            do j = 1, ncolmax
                col = matrix(j,i)%index
                if (col < 0) cycle
                matrix(j,i)%index = new_index(col)
            end do
        end do
        !$omp end parallel do

    end subroutine


    ! <vtype=4,8>

    subroutine zzz_trexp_direct_inplace_v<vtype>(input, tau)
        real*<vtype>, intent(inout) :: input(:)
        real*<vtype>, intent(in)    :: tau
        integer :: i
        real*<vtype> :: v, w

        if (tau == 0) then
            return
        else if (tau < 0) then
            input = 0
            return
        end if
        w = exp(-1 / tau)
        v = 1 - w
        do i = 2, size(input)
            input(i) = w * input(i-1) + v * input(i)
        end do

    end subroutine


    subroutine zzz_trexp_direct_outplace_v<vtype>(input, output, tau)
        real*<vtype>, intent(in)    :: input(:)
        real*<vtype>, intent(inout) :: output(size(input))
        real*<vtype>, intent(in)    :: tau
        integer :: i
        real*<vtype> :: v, w

        if (tau == 0) then
            output = input
            return
        else if (tau < 0) then
            output = 0
            return
        end if
        w = exp(-1 / tau)
        v = 1 - w
        output(1) = input(1)
        do i = 2, size(input)
            output(i) = w * output(i-1) + v * input(i)
        end do

    end subroutine


    subroutine zzz_trexp_transpose_inplace_v<vtype>(input, tau)
        real*<vtype>, intent(inout) :: input(:)
        real*<vtype>, intent(in)    :: tau
        integer :: n, i
        real*<vtype> :: v, w

        n = size(input)
        if (tau == 0) then
            return
        else if (tau < 0) then
            input = 0
            return
        end if
        w = exp(-1 / tau)
        v = 1 - w
        do i = n - 1, 1, -1
            input(i) = w * input(i+1) + v * input(i)
        end do
        input(1) = input(1) / v

    end subroutine


    subroutine zzz_trexp_transpose_outplace_v<vtype>(input, output, tau)
        real*<vtype>, intent(in)    :: input(:)
        real*<vtype>, intent(inout) :: output(size(input))
        real*<vtype>, intent(in)    :: tau
        integer :: n, i
        real*<vtype> :: v, w

        n = size(input)
        if (tau == 0) then
            output = input
        else if (tau < 0) then
            output = 0
            return
        end if
        w = exp(-1 / tau)
        v = 1 - w
        output(n) = v * input(n)
        do i = n - 1, 1, -1
            output(i) = w * output(i+1) + v * input(i)
        end do
        output(1) = output(1) / v

    end subroutine


    subroutine trexp_direct_v<vtype>(input, ninputs, ndetectors, isize, istride, output, noutputs, osize, ostride, tau, ntaus)

        real*<vtype>, intent(inout) :: input(ninputs)
        real*<vtype>, intent(inout) :: output(noutputs)
        integer, intent(in)    :: ninputs, ndetectors, isize, istride
        integer, intent(in)    :: noutputs, osize, ostride
        real*<vtype>, intent(in)    :: tau(ntaus)
        integer, intent(in)    :: ntaus

        integer :: i

        if (loc(input) == loc(output)) then
            !$omp parallel do
            do i = 1, ndetectors
                call zzz_trexp_direct_inplace_v<vtype>(                        &
                         input((i-1)*istride+1:(i-1)*istride+isize),           &
                         tau(min(i, ntaus)))
            end do
            !$omp end parallel do
        else
            !$omp parallel do
            do i = 1, ndetectors
                call zzz_trexp_direct_outplace_v<vtype>(                       &
                         input((i-1)*istride+1:(i-1)*istride+isize),           &
                         output((i-1)*ostride+1:(i-1)*ostride+osize),          &
                         tau(min(i, ntaus)))
            end do
            !$omp end parallel do
        end if

    end subroutine


    subroutine trexp_transpose_v<vtype>(input, ninputs, ndetectors, isize,     &
            istride, output, noutputs, osize, ostride, tau, ntaus)

        real*<vtype>, intent(inout) :: input(ninputs)
        real*<vtype>, intent(inout) :: output(noutputs)
        integer, intent(in)    :: ninputs, ndetectors, isize, istride
        integer, intent(in)    :: noutputs, osize, ostride
        real*<vtype>, intent(in)    :: tau(ntaus)
        integer, intent(in)    :: ntaus

        integer :: i

        if (loc(input) == loc(output)) then
            !$omp parallel do
            do i = 1, ndetectors
                call zzz_trexp_transpose_inplace_v<vtype>(                     &
                         input((i-1)*istride+1:(i-1)*istride+isize),           &
                         tau(min(i, ntaus)))
            end do
            !$omp end parallel do
        else
            !$omp parallel do
            do i = 1, ndetectors
                call zzz_trexp_transpose_outplace_v<vtype>(                    &
                         input((i-1)*istride+1:(i-1)*istride+isize),           &
                         output((i-1)*ostride+1:(i-1)*ostride+osize),          &
                         tau(min(i, ntaus)))
            end do
            !$omp end parallel do
        end if

    end subroutine


end module operators
