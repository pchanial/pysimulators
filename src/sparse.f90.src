module sparse

    use module_pointingmatrix
    implicit none

    ! <itype=4,4,4,8,8,8>
    ! <mtype=4,4,8,4,4,8>
    ! <vtype=4,8,8,4,8,8>

contains


    subroutine fsc_matvec_i<itype>_m<mtype>_v<vtype>(matrix, input, output,    &
                                   nrowmax, ninput, noutput)
        integer, parameter          :: s = <itype> + <mtype>
        integer*8, intent(in)       :: nrowmax
        integer*8, intent(in)       :: ninput
        integer*8, intent(in)       :: noutput
        !f2py integer*1, intent(in) :: matrix(nrowmax*ninput*s)
        type(PointingElement_i<itype>_m<mtype>), intent(in) ::                 &
            matrix(nrowmax, ninput)
        real*<vtype>, intent(in)    :: input(ninput)
        real*<vtype>, intent(inout) :: output(0:noutput-1)

        integer*8 :: i, j
        integer*<itype> :: col

        if (nrowmax == 1) then
            !$omp parallel do private(col)
            do i = 1, ninput
                col = matrix(1,i)%index
                if (col < 0) cycle
                !$omp atomic
                output(col) = output(col) + matrix(1,i)%value * input(i)
            end do
            !$omp end parallel do
            return
        end if

        !$omp parallel do private(col)
        do i = 1, ninput
            do j = 1, nrowmax
                col = matrix(j,i)%index
                if (col < 0) cycle
                !$omp atomic
                output(col) = output(col) + matrix(j,i)%value * input(i)
            end do
        end do
        !$omp end parallel do

    end subroutine


    subroutine fsc_rot2d_matvec_i<itype>_m<mtype>_v<vtype>(matrix, input,      &
                                         output, nrowmax, ninput, noutput)
        integer, parameter          :: s = <itype> + 2 * <mtype>
        integer*8, intent(in)       :: nrowmax
        integer*8, intent(in)       :: ninput
        integer*8, intent(in)       :: noutput
        !f2py integer*1, intent(in) :: matrix(nrowmax*ninput*s)
        type(PointingElementRot2d_i<itype>_m<mtype>), intent(in) ::            &
            matrix(nrowmax, ninput)
        !f2py real*<vtype>          :: input(2*ninput)
        real*<vtype>, intent(in)    :: input(2,ninput)
        !f2py real*<vtype>          :: output(2*noutput)
        real*<vtype>, intent(inout) :: output(2,0:noutput-1)

        integer*8 :: i, j
        integer*<itype> :: col

        !$omp parallel do private(col)
        do i = 1, ninput
            do j = 1, nrowmax
                col = matrix(j,i)%index
                if (col < 0) cycle
                 !$omp atomic
                output(1,col) = output(1,col) + (matrix(j,i)%r11 * input(1,i) +&
                                                 matrix(j,i)%r21 * input(2,i))
                !$omp atomic
                output(2,col) = output(2,col) + (-matrix(j,i)%r21 * input(1,i)+&
                                                  matrix(j,i)%r11 * input(2,i))
            end do
        end do
        !$omp end parallel do

    end subroutine


    subroutine fsc_rot3d_matvec_i<itype>_m<mtype>_v<vtype>(matrix, input,      &
                                         output, nrowmax, ninput, noutput)
        integer, parameter          :: s = <itype> + 3 * <mtype>
        integer*8, intent(in)       :: nrowmax
        integer*8, intent(in)       :: ninput
        integer*8, intent(in)       :: noutput
        !f2py integer*1, intent(in) :: matrix(nrowmax*ninput*s)
        type(PointingElementRot3d_i<itype>_m<mtype>), intent(in) ::            &
            matrix(nrowmax, ninput)
        !f2py real*<vtype>          :: input(3*ninput)
        real*<vtype>, intent(in)    :: input(3,ninput)
        !f2py real*<vtype>          :: output(3*noutput)
        real*<vtype>, intent(inout) :: output(3,0:noutput-1)

        integer*8 :: i, j
        integer*<itype> :: col

        !$omp parallel do private(col)
        do i = 1, ninput
            do j = 1, nrowmax
                col = matrix(j,i)%index
                if (col < 0) cycle
                !$omp atomic
                output(1,col) = output(1,col) + matrix(j,i)%r11 * input(1,i)
                !$omp atomic
                output(2,col) = output(2,col) + (matrix(j,i)%r22 * input(2,i) +&
                                                 matrix(j,i)%r32 * input(3,i))
                !$omp atomic
                output(3,col) = output(3,col) + (-matrix(j,i)%r32 * input(2,i)+&
                                                  matrix(j,i)%r22 * input(3,i))
            end do
        end do
        !$omp end parallel do

    end subroutine


    subroutine fsr_matvec_i<itype>_m<mtype>_v<vtype>(matrix, input, output,    &
                                   ncolmax, ninput, noutput)
        integer, parameter          :: s = <itype> + <mtype>
        integer*8, intent(in)       :: ncolmax
        integer*8, intent(in)       :: ninput
        integer*8, intent(in)       :: noutput
        !f2py integer*1, intent(in) :: matrix(ncolmax*noutput*s)
        type(PointingElement_i<itype>_m<mtype>), intent(in) ::                 &
            matrix(ncolmax, noutput)
        real*<vtype>, intent(in)    :: input(0:ninput-1)
        real*<vtype>, intent(inout) :: output(noutput)

        integer*8 :: i, j
        integer*<itype> :: col

        if (ncolmax == 1) then
            !$omp parallel do private(col)
            do i = 1, noutput
                col = matrix(1,i)%index
                if (col < 0) cycle
                output(i) = output(i) + matrix(1,i)%value * input(col)
            end do
            !$omp end parallel do
            return
        end if

        !$omp parallel do private(col)
        do i = 1, noutput
            do j = 1, ncolmax
                col = matrix(j,i)%index
                if (col < 0) cycle
                output(i) = output(i) + matrix(j,i)%value * input(col)
            end do
!!$         output(i) = output(i) +                                            &
!!$                     sum(input(matrix(:,i)%index) * matrix(:,i)%value,      &
!!$                         mask=matrix(:,i)%index >= 0)
        end do
        !$omp end parallel do

    end subroutine


    subroutine fsr_rot2d_matvec_i<itype>_m<mtype>_v<vtype>(matrix, input,      &
                                         output, ncolmax, ninput, noutput)
        integer, parameter          :: s = <itype> + 2 * <mtype>
        integer*8, intent(in)       :: ncolmax
        integer*8, intent(in)       :: ninput
        integer*8, intent(in)       :: noutput
        !f2py integer*1, intent(in) :: matrix(ncolmax*noutput*s)
        type(PointingElementRot2d_i<itype>_m<mtype>), intent(in) ::            &
            matrix(ncolmax, noutput)
        !f2py real*<vtype>          :: input(2*ninput)
        real*<vtype>, intent(in)    :: input(2,0:ninput-1)
        !f2py real*<vtype>          :: output(2*noutput)
        real*<vtype>, intent(inout) :: output(2,noutput)

        integer*8 :: i, j
        integer*<itype> :: col

        !$omp parallel do private(col)
        do i = 1, noutput
            do j = 1, ncolmax
                col = matrix(j,i)%index
                if (col < 0) cycle
                output(1,i) = output(1,i) + matrix(j,i)%r11 * input(1,col) -   &
                                            matrix(j,i)%r21 * input(2,col)
                output(2,i) = output(2,i) + matrix(j,i)%r21 * input(1,col) +   &
                                            matrix(j,i)%r11 * input(2,col)
            end do
        end do
        !$omp end parallel do

    end subroutine


    subroutine fsr_rot3d_matvec_i<itype>_m<mtype>_v<vtype>(matrix, input,      &
                                         output, ncolmax, ninput, noutput)
        integer, parameter          :: s = <itype> + 3 * <mtype>
        integer*8, intent(in)       :: ncolmax
        integer*8, intent(in)       :: ninput
        integer*8, intent(in)       :: noutput
        !f2py integer*1, intent(in) :: matrix(ncolmax*noutput*s)
        type(PointingElementRot3d_i<itype>_m<mtype>), intent(in) ::            &
            matrix(ncolmax, noutput)
        !f2py real*<vtype>          :: input(3*ninput)
        real*<vtype>, intent(in)    :: input(3,0:ninput-1)
        !f2py real*<vtype>          :: output(3*noutput)
        real*<vtype>, intent(inout) :: output(3,noutput)

        integer*8 :: i, j
        integer*<itype> :: col

        !$omp parallel do private(col)
        do i = 1, noutput
            do j = 1, ncolmax
                col = matrix(j,i)%index
                if (col < 0) cycle
                output(1,i) = output(1,i) + matrix(j,i)%r11 * input(1,col)
                output(2,i) = output(2,i) + matrix(j,i)%r22 * input(2,col) -   &
                                            matrix(j,i)%r32 * input(3,col)
                output(3,i) = output(3,i) + matrix(j,i)%r32 * input(2,col) +   &
                                            matrix(j,i)%r22 * input(3,col)
            end do
        end do
        !$omp end parallel do

    end subroutine


end module sparse
