import sys
import waflib

from bento.commands import hooks
from bento.commands.core import Command
from bento.core.utils import pprint
from bento.backends.waf_backend import WAF_TOOLDIR
from waflib import Options

class TestCommand(Command):
    def run(self, opts):
        pprint('BLUE', "Running test command....")

def startup(context):
    context.register_command("test", TestCommand)

def _set_mangling_var(conf, u, du, case, f2pycompat=True):
    env = conf.env
    macros = []

    if du == '_':
        env['F77_UNDERSCORE_G77'] = 1
        macros.append('F77_UNDERSCORE_G77')
        if f2pycompat:
            macros.append('UNDERSCORE_G77')
    else:
        env['F77_UNDERSCORE_G77'] = 0

    if u == '_':
        env['F77_NO_APPEND_FORTRAN'] = 0
    else:
        env['F77_NO_APPEND_FORTRAN'] = 1
        macros.append('F77_NO_APPEND_FORTRAN')
        if f2pycompat:
            macros.append('NO_APPEND_FORTRAN')

    if case == 'upper':
        env['F77_UPPERCASE_FORTRAN'] = 1
        macros.append('F77_UPPERCASE_FORTRAN')
        if f2pycompat:
            macros.append('UPPERCASE_FORTRAN')
    else:
        env['F77_UPPERCASE_FORTRAN'] = 0

    env.DEFINES.extend(macros)

@hooks.post_configure
def post_configure(context):
    opts = context.waf_options_context
    conf = context.waf_context

    opts.load("compiler_cxx")
    opts.load("compiler_fc")
    opts.load("f2py", tooldir=[WAF_TOOLDIR])
    Options.options.check_fc = "gfortran"
    Options.options.check_cxx_compiler = "g++"
    if sys.platform == "win32" and conf.env.CC_NAME == "msvc":
        Options.options.check_fc = "ifort"
        Options.options.check_cxx_compiler = "msvc"

    conf.load("compiler_cxx")
    conf.load("compiler_fc")
    conf.load("f2py", tooldir=[WAF_TOOLDIR])
    conf.load("ordered_c", tooldir=[WAF_TOOLDIR])
    conf.load("arch", tooldir=[WAF_TOOLDIR])

    if conf.env.CC_NAME == 'gcc':
        conf.env.append_value('CFLAGS_PYEXT', "-Wfatal-errors")
        conf.env.append_value('CXXFLAGS_PYEXT', "-Wfatal-errors")

    print conf.env

    if conf.env.FC_NAME == 'GFORTRAN':
        conf.env.FCFLAGS = ['-ffree-form', '-Wall', '-fPIC', '-cpp', '-fdefault-real-8', '-DPRECISION_REAL=8', '-fopenmp']

    conf.env.F2PYFLAGS = [ '--f90flags="' + ' '.join(conf.env.FCFLAGS) + '"']
    conf.env.F2PYFLAGS = []
    conf.env.F2PYFCOMPILER = 'gnu95'

    if sys.platform == "darwin":
        conf.env["MACOSX_DEPLOYMENT_TARGET"] = "10.4"

        conf.check_cc_default_arch()
        archs = [conf.env.DEFAULT_CC_ARCH]
        conf.env.ARCH = archs

    conf.check_fortran_verbose_flag()
    conf.check_fortran_clib()
    conf.check_fortran_dummy_main()
    u, du, c = conf.check_fortran_mangling()
    _set_mangling_var(conf, u, du, c)

@hooks.pre_build
def pre_build(context):
    default_builder = context.default_builder

    def builder(extension):
        return default_builder(extension,
                               features="c cshlib pyext bento f2py f2py_fortran",
                               use="CLIB")
    context.register_builder("_lib", builder)

